{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/pages/MainPage.js"],"names":["ErrorMessage","style","display","width","height","objectFit","margin","scr","imgPic","alt","useMarvelService","useState","loading","setLoading","error","setError","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","message","clearError","useHttp","_apiBase","getAllCharacters","offset","process","res","results","map","_transformCharacter","getCharacter","id","getAllComics","_transformComics","getComics","char","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","title","pageCount","language","textObjects","price","prices","View","imgStyle","className","src","href","RandomChar","setChar","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","Math","floor","random","then","errorMessage","spinner","Spinner","content","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setNewItemLoading","setOffset","charEnded","setCharEnded","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","arr","item","i","tabIndex","ref","el","current","onCharSelected","focus","onKeyPress","e","key","focusOnItem","renderItems","disabled","Skeleton","CharInfo","charId","skeleton","ErrorBoundary","state","errorInfo","console","log","this","setState","children","Component","MainPage","selectedChar","decoration"],"mappings":"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","file":"static/js/3.b26d9031.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import imgPic from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n\treturn (\r\n\t\t<img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}} scr={imgPic} alt=\"Error\"/>\r\n\t)\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n  const { loading, request, error, clearError } = useHttp();\r\n\r\n  const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\r\n  const _baseOffset = 210;\r\n\r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    const res = await request(\r\n      `${_apiBase}characters?limit=9&offset=${offset}&apikey=${process.env.REACT_APP_MARVEL_API_KEY}`\r\n    );\r\n    return res.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  const getCharacter = async (id) => {\r\n    const res = await request(\r\n      `${_apiBase}characters/${id}?apikey=${process.env.REACT_APP_MARVEL_API_KEY}`\r\n    );\r\n    return _transformCharacter(res.data.results[0]);\r\n  };\r\n\r\n  const getAllComics = async (offset = 0) => {\r\n    const res = await request(\r\n      `${_apiBase}comics?apikey=${process.env.REACT_APP_MARVEL_API_KEY}`\r\n    );\r\n    return res.data.results.map(_transformComics);\r\n  };\r\n\r\n  const getComics = async (id) => {\r\n    const res = await request(\r\n      `${_apiBase}comics/${id}?apikey=${process.env.REACT_APP_MARVEL_API_KEY}`\r\n    );\r\n    return _transformComics(res.data.results[0]);\r\n  };\r\n\r\n  const _transformCharacter = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: char.description\r\n        ? `${char.description.slice(0, 210)}...`\r\n        : \"There is no description for this character\",\r\n      thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items,\r\n    };\r\n  };\r\n\r\n  const _transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title: comics.title,\r\n      description: comics.description || \"There is no description\",\r\n      pageCount: comics.pageCount\r\n        ? `${comics.pageCount} p.`\r\n        : \"No information about the number of pages\",\r\n      thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n      language: comics.textObjects.language || \"en-us\",\r\n      price: comics.prices.price ? `${comics.prices.price}$` : \"not available\",\r\n    };\r\n  };\r\n\r\n  return { loading, error, clearError, getAllCharacters, getCharacter, getAllComics, getComics };\r\n};\r\n\r\nexport default useMarvelService;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const request = useCallback(\r\n    async (\r\n      url,\r\n      method = \"GET\",\r\n      body = null,\r\n      headers = { \"Content-Type\": \"application/json\" }\r\n    ) => {\r\n      setLoading(true);\r\n      try {\r\n        const response = await fetch(url, { method, body, headers });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n\r\n        setLoading(false);\r\n\r\n        return data;\r\n      } catch (e) {\r\n        setLoading(false);\r\n        setError(e.message);\r\n        throw e;\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  const clearError = useCallback(() => setError(null), []);\r\n\r\n  return { loading, request, error, clearError };\r\n};\r\n","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from \"react\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport useMarvelService from \"../../services/MarvelService\";\n\nimport \"./randomChar.scss\";\nimport mjolnir from \"../../resources/img/mjolnir.png\";\n\nconst RandomChar = () => {\n  const [char, setChar] = useState({});\n\n  const {loading, error, getCharacter, clearError} = useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n    const timerId = setInterval(updateChar, 60000);\n\n    return () => {\n      clearInterval(timerId);\n    };\n  }, []);\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  const updateChar = () => {\n\t\tclearError();\n    const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n    getCharacter(id).then(onCharLoaded);\n  };\n\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const spinner = loading ? <Spinner /> : null;\n  const content = !(loading || error) ? <View char={char} /> : null;\n\n  return (\n    <div className='randomchar'>\n      {errorMessage}\n      {spinner}\n      {content}\n      <div className='randomchar__static'>\n        <p className='randomchar__title'>\n          Random character for today!\n          <br />\n          Do you want to get to know him better?\n        </p>\n        <p className='randomchar__title'>Or choose another one</p>\n        <button className='button button__main'>\n          <div className='inner' onClick={updateChar}>\n            try it\n          </div>\n        </button>\n        <img src={mjolnir} alt='mjolnir' className='randomchar__decoration' />\n      </div>\n    </div>\n  );\n};\n\nconst View = ({ char }) => {\n  const { name, description, thumbnail, homepage, wiki } = char;\n  let imgStyle = { objectFit: \"cover\" };\n  if (\n    thumbnail ===\n    \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n  ) {\n    imgStyle = { objectFit: \"contain\" };\n  }\n\n  return (\n    <div className='randomchar__block'>\n      <img\n        src={thumbnail}\n        alt='Random character'\n        className='randomchar__img'\n        style={imgStyle}\n      />\n      <div className='randomchar__info'>\n        <p className='randomchar__name'>{name}</p>\n        <p className='randomchar__descr'>{description}</p>\n        <div className='randomchar__btns'>\n          <a href={homepage} className='button button__main'>\n            <div className='inner'>homepage</div>\n          </a>\n          <a href={wiki} className='button button__secondary'>\n            <div className='inner'>Wiki</div>\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RandomChar;\n","import { useState, useEffect, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport \"./charList.scss\";\n\nconst CharList = (props) => {\n  const [charList, setCharList] = useState([]);\n  const [newItemLoading, setNewItemLoading] = useState(false);\n  const [offset, setOffset] = useState(210);\n  const [charEnded, setCharEnded] = useState(false);\n\n  const {loading, error, getAllCharacters} = useMarvelService();\n\n  useEffect(() => {\n    onRequest(offset, true);\n  }, []);\n\n  const onRequest = (offset, initial) => {\n\t\tinitial ? setNewItemLoading(false) : setNewItemLoading(true);\n    getAllCharacters(offset)\n      .then(onCharListLoaded)\n  };\n\n  const onCharListLoaded = (newCharList) => {\n    let ended = false;\n    if (newCharList.length < 9) {\n      ended = true;\n    }\n\n    setCharList((charList) => [...charList, ...newCharList]);\n    setNewItemLoading((newItemLoading) => false);\n    setOffset((offset) => offset + 9);\n    setCharEnded((charEnded) => ended);\n  };\n\n  const itemRefs = useRef([]);\n\n  const focusOnItem = (id) => {\n    itemRefs.current[id].focus();\n  };\n\n  function renderItems(arr) {\n    const items = arr.map((item, i) => {\n      let imgStyle = { objectFit: \"cover\" };\n      if (\n        item.thumbnail ===\n        \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n      ) {\n        imgStyle = { objectFit: \"unset\" };\n      }\n\n      return (\n        <li\n          className='char__item'\n          tabIndex={0}\n          ref={(el) => (itemRefs.current[i] = el)}\n          key={item.id}\n          onClick={() => {\n            props.onCharSelected(item.id);\n            focusOnItem(i);\n          }}\n          onKeyPress={(e) => {\n            if (e.key === \" \" || e.key === \"Enter\") {\n              this.props.onCharSelected(item.id);\n              this.focusOnItem(i);\n            }\n          }}\n        >\n          <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n          <div className='char__name'>{item.name}</div>\n        </li>\n      );\n    });\n\n    return <ul className='char__grid'>{items}</ul>;\n  }\n\n  const items = renderItems(charList);\n\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const spinner = loading && !newItemLoading ? <Spinner /> : null;\n\n  return (\n    <div className='char__list'>\n      {errorMessage}\n      {spinner}\n\t\t\t{items}\n      <button\n        className='button button__main button__long'\n        disabled={newItemLoading}\n        style={{ display: charEnded ? \"none\" : \"block\" }}\n        onClick={() => onRequest(offset)}\n      >\n        <div className='inner'>load more</div>\n      </button>\n    </div>\n  );\n};\n\nCharList.propTypes = {\n  onCharSelected: PropTypes.func.isRequired,\n};\n\nexport default CharList;\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport useMarvelService from \"../../services/MarvelService\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport Skeleton from \"../skeleton/Skeleton\";\nimport \"./charInfo.scss\";\n\nconst CharInfo = (props) => {\n  const [char, setChar] = useState(null);\n\n  const {loading, error, getCharacter, clearError} = useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n  }, [props.charId]);\n\n  const updateChar = () => {\n    const { charId } = props;\n    if (!charId) {\n      return;\n    }\n\t\tclearError();\n    getCharacter(charId).then(onCharLoaded);\n  };\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  const skeleton = char || loading || error ? null : <Skeleton />;\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const spinner = loading ? <Spinner /> : null;\n  const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n  return (\n    <div className='char__info'>\n      {skeleton}\n      {errorMessage}\n      {spinner}\n      {content}\n    </div>\n  );\n};\n\nconst View = ({ char }) => {\n  const { name, description, thumbnail, homepage, wiki, comics } = char;\n\n  let imgStyle = { objectFit: \"cover\" };\n  if (\n    thumbnail ===\n    \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n  ) {\n    imgStyle = { objectFit: \"contain\" };\n  }\n\n  return (\n    <>\n      <div className='char__basics'>\n        <img src={thumbnail} alt={name} style={imgStyle} />\n        <div>\n          <div className='char__info-name'>{name}</div>\n          <div className='char__btns'>\n            <a href={homepage} className='button button__main'>\n              <div className='inner'>homepage</div>\n            </a>\n            <a href={wiki} className='button button__secondary'>\n              <div className='inner'>Wiki</div>\n            </a>\n          </div>\n        </div>\n      </div>\n      <div className='char__descr'>{description}</div>\n      <div className='char__comics'>Comics:</div>\n      <ul className='char__comics-list'>\n        {comics.length > 0 ? null : \"There is no comics with this character\"}\n        {comics.map((item, i) => {\n          // eslint-disable-next-line\n          if (i > 9) return;\n          return (\n            <li key={i} className='char__comics-item'>\n              {item.name}\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n\nCharInfo.propTypes = {\n  charId: PropTypes.number,\n};\n\nexport default CharInfo;\n","import {Component} from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n\tstate = {\r\n\t\terror: false\r\n\t}\r\n\r\n\t// static getDerivedStateFromError(error) {\r\n\t// \treturn {error: true};\r\n\t// }\r\n\r\n\tcomponentDidCatch(error, errorInfo) {\r\n\t\tconsole.log(error, errorInfo);\r\n\t\tthis.setState({\r\n\t\t\terror: true\r\n\t\t})\r\n\t}\r\n\r\n\trender() {\r\n\t\tif(this.state.error) {\r\n\t\t\treturn (\r\n\t\t\t\t<ErrorMessage/>\r\n\t\t\t)\r\n\t\t}\r\n\r\n\t\treturn this.props.children;\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from \"../../resources/img/vision.png\";\r\n\r\nconst MainPage = () => {\r\n  const [selectedChar, setChar] = useState(null);\r\n\r\n  const onCharSelected = (id) => {\r\n    setChar(id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ErrorBoundary>\r\n        <RandomChar />\r\n      </ErrorBoundary>\r\n      <div className='char__content'>\r\n        <ErrorBoundary>\r\n          <CharList onCharSelected={onCharSelected} />\r\n        </ErrorBoundary>\r\n        <ErrorBoundary>\r\n          <CharInfo charId={selectedChar} />\r\n        </ErrorBoundary>\r\n      </div>\r\n      <img className='bg-decoration' src={decoration} alt='vision' />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainPage;"],"sourceRoot":""}